<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.8.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

            <!--

                시큐리티이용해서 인증처리하기
                <security:http>태그를 이용해서 인증처리할 수 있음

            -->

        <security:http auto-config="true">
            <!--로그인설정하기-->
            <!--
                id,password로 인증처리하기.
                <sercurity:from-login>태그 이용
                태그 속성
                username-parameter : id값의 name속성명을 설정.
                password-parameter : password값의 name속성명을 설정
                login-page : 커스터마이징한 로그인페이지 주소를 설정
                default-target-url : 인증 후 연결될 기본 주소 설정 -> 이전 페이지로 이동
                authentication-failure-forward-url : 인증실패 후 연결될 서비스 URL(필요시)
                authentication-success-forward-url : 인증성공 후 연결될 서비스 URL(필요시)
                login-processing-url : 인증을 처리하는 URL주소를 설정
            -->
                    <!--로그인 폼에 대한 설정을 하는것.-->
                    <!--loginend.do는 에러난 적 없는데 loginsuccess 로 가면서 얘가 없어서 404가 뜨는거. -->
                <security:form-login
                    username-parameter="userId"
                    password-parameter="pw"
                    login-processing-url="/loginend.do"
                    authentication-success-forward-url="/loginsuccess"
                    authentication-failure-forward-url="/loginfail"
                />
            <!--
                <sercurity:csrf disabled="true">
            -->

        <security:csrf disabled="true"/>

            <!--
                로그아웃 처리 설정
                <security:logout>태그를 이용
                logout-url : 로그아웃 처리할 url 설정 -> /logout
                logout-success-url : 로그아웃 처리 후 실행할 서비스 url
            -->

            <!--
                요청을 차단/허용할 url설정하기
                <security:intercept-url>태그를 이용
                    pattern : 차단, 허용할 url패턴
                    access : ckeks, 하용여부에 대한 설정(permitAll(), hasAnyAuthority(,))

            -->
            <security:intercept-url pattern="/**" access="hasAnyAuthority('admin')"/>
            <!--admin권한인데 manager했기에 403(권한문제) 이 뜬다. -->

        </security:http>

            <!--
                인증처리 관련 설정
                1. 인메모리방식으로 처리하기 -> 지정된 사용자만 확인하고 인증처리하는 방식 X
                2. DB연동해서 처리하기 ->
                *패스워드 암호화 처리해야함
                <security:authentication-provider>
                    인메모리 : <security:user-service>태그를 이용
                    DB연동 : 태그 속성인 user-service-ref=:service클래스" 를 이용
                    <security:password-encoder ref=""> 태그 이용해서 패스워드 인코더 등록.
            -->
        <bean id="passwordEncoder"
              class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
        <security:authentication-manager>
            <security:authentication-provider>
                <security:user-service>
                    <security:user name="bslove" authorities="admin"
                        password="$2a$10$Mq4zMOKL9IgL2lJ7lS0.X.5wy8AaKA6lZjVOK7pvV.3iYLgSr6l2G"/>
                </security:user-service>
                <security:password-encoder ref="passwordEncoder"/>

            </security:authentication-provider>
        </security:authentication-manager>
</beans>

